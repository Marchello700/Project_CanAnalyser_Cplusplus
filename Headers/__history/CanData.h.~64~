#include <ctime>
#include <algorithm>

#ifndef canDataH
#define canDataH

enum CanVersion {
	a = 0,	//2.0A
	b = 1,  //2.0B
};

class CanDataFrame : TObject {
private:
	int m_id;       //message Identifier
	int m_dlc;      //data length code
	int m_data[8];  //data
	CanVersion m_version;   //message Identifier version, 2.0A or 2.0B
public:
	CanDataFrame() = default;
	~CanDataFrame() {};

	inline int getId() { return m_id; };
	inline void setId(int value) { m_id = value; }

	inline int getDlc()  { return m_dlc; }
	inline void setDlc(int value) { m_dlc = value; }

	inline const int * getData() { return m_data; };
	inline void setData(int value[], int length)
	{
		for (int i; i < std::min(length,8); i++) {
            m_data[i] = value[i];
		}
	};

	inline CanVersion getVersion() { return m_version; }
    inline void setVersion(CanVersion value) { m_version = value; }
};

class CanDataFrameEx : CanDataFrame {
private:
    struct tm time;
};

#endif //canDataH
