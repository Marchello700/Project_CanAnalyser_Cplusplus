//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "mainForm.h"
#include "CanData.h"
#include "CanParser.h"
#include <System.Generics.Collections.hpp>
#include <sstream>
#include <list>

//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
	OpenDialog = new TOpenDialog(this);
	SaveDialog = new TSaveDialog(this);
	OpenDialog->Filter = "Text files (*.txt)|*.TXT|Any file (*.*)|*.*";
	SaveDialog->Filter = "Text files (*.txt)|*.TXT|Any file (*.*)|*.*";
	file_list = new std::map<UnicodeString,TObjectList*>();
}
//---------------------------------------------------------------------------
void __fastcall TForm1::LoadFileButtonClick(TObject *Sender)
{
	if (this->OpenDialog->Execute()) {
		if (FileExists(OpenDialog->FileName)) {
			if (FilenameListBox->Items->IndexOf(OpenDialog->FileName) == -1) {
				this->LoadFile(OpenDialog->FileName);
			}
		}
	}
}
//---------------------------------------------------------------------------
__fastcall TForm1::~TForm1()
{
	delete OpenDialog;
	delete SaveDialog;
    delete file_list;
}
//---------------------------------------------------------------------------
void __fastcall TForm1::LoadFile(UnicodeString filename)
{
	TStringList * datafile = new TStringList();
	TCanDataFrame * can_data;
	TObjectList * can_data_frame_list = new TObjectList(true);
	datafile->LoadFromFile(OpenDialog->FileName);
	for (int i = 0; i < datafile->Count; i++) {
		//workaround to convert UnicodeString to std::string
		AnsiString ansiB(datafile->Strings[i]);
		char* str = new char[ansiB.Length()+1];
		strcpy(str, ansiB.c_str());
		//end of workaround
		can_data = CanParser::CanScannerParser(str);
		if (can_data != NULL) {
			can_data_frame_list->Add(can_data);            
		}
		delete[] str;
	}
	delete datafile;

	FilenameListBox->AddItem(OpenDialog->FileName,NULL);
	this->file_list->emplace(OpenDialog->FileName,can_data_frame_list);

	this->UpdateComboBox(ComboBox1,FilenameListBox->Items);
	this->UpdateComboBox(ComboBox2,FilenameListBox->Items);
}
//---------------------------------------------------------------------------
std::list<int> * __fastcall TForm1::GetUniqueIdList(TObjectList * can_data_list)
{
	TStringList * result = new TStringList();
	TCanDataFrame * can_data;
	std::list<int> * id_list = new std::list<int>();
	for (auto item : can_data_list) {
		can_data = (TCanDataFrame*)item;//Item casting from TObject to TCanDataFrame because of unusable TObjectList__1<T>, which supports only generic types
        std::list<int>::iterator findIter = std::find(id_list->begin(), id_list->end(), can_data->getId());
		if (findIter == id_list->end()) {
            id_list->push_back(can_data->getId());
        }
	}
	return id_list;
}
//---------------------------------------------------------------------------
std::list<int> * __fastcall TForm1::GetSelectedIdListFromListBox(TListBox * list_box)
{
	std::list<int> * id_list = new std::list<int>();
	for (int i = 0; i < list_box->Count; i++) {
		if (list_box->Selected[i]) {
			//workaround to convert TStrings to std::string
			AnsiString ansiB(list_box->Items->Strings[i]);
			char* str = new char[ansiB.Length()+1];
			strcpy(str, ansiB.c_str());
			//end of workaround
			int hex = std::stoi(str,0,16);
			id_list->push_back(hex);
		}
	}
    return id_list;
}
//---------------------------------------------------------------------------
void __fastcall TForm1::LoadIdListInListBox(std::list<int> * id_list, TListBox * list_box)
{
    list_box->Clear();
	for (auto id : *id_list) {
		std::ostringstream ss;
		ss << std::hex << id;
		std::string result = ss.str();
		list_box->AddItem(result.c_str(),NULL);
	}
}
//---------------------------------------------------------------------------
void __fastcall TForm1::UpdateComboBox(TComboBox * combo_box, TStrings * file_list)
{
	combo_box->Clear();
	combo_box->Items->AddStrings(file_list);
}
//---------------------------------------------------------------------------
void __fastcall TForm1::ComboBox1CloseUp(TObject *Sender)
{
	System::UnicodeString str = this->ComboBox1->Text;
	std::map<UnicodeString,TObjectList*>::iterator iterator = this->file_list->find(str);
	if (iterator == this->file_list->end()) {
		return;
	}
	TObjectList * can_data_frame_list = iterator->second;
	std::list<int> * id_list = this->GetUniqueIdList(can_data_frame_list);
	this->LoadIdListInListBox(id_list,this->IdListBox1);
	delete id_list;
}
//---------------------------------------------------------------------------
void __fastcall TForm1::FormCreate(TObject *Sender)
{
	this->Memo1->Clear();
    this->Memo2->Clear();
}
//---------------------------------------------------------------------------
void __fastcall TForm1::FilterButton1Click(TObject *Sender)
{
	std::map<UnicodeString,TObjectList*>::iterator iterator = this->file_list->find(this->ComboBox1->Text);
	if (iterator == this->file_list->end()) {
        return;
	}

	std::list<int> * id_list = this->GetSelectedIdListFromListBox(IdListBox1);
	TObjectList * can_data_frame_list = iterator->second;
    this->Memo1->Clear();
	for (int i = 0; i < can_data_frame_list->Count; i++) {
		TCanDataFrame * can_data_frame = (TCanDataFrame*)can_data_frame_list->Items[i];
        std::list<int>::iterator findIter = std::find(id_list->begin(), id_list->end(), can_data_frame->getId());
		if (findIter != id_list->end()) {
            this->Memo1->Lines->Add(can_data_frame->ToString());
        }
	}
	delete id_list;
}
//---------------------------------------------------------------------------
void __fastcall TForm1::ComboBox2CloseUp(TObject *Sender)
{
	System::UnicodeString str = this->ComboBox2->Text;
	std::map<UnicodeString,TObjectList*>::iterator iterator = this->file_list->find(str);
	if (iterator == this->file_list->end()) {
		return;
	}
	TObjectList * can_data_frame_list = iterator->second;
	std::list<int> * id_list = this->GetUniqueIdList(can_data_frame_list);
	this->LoadIdListInListBox(id_list,this->IdListBox2);
	delete id_list;
}
//---------------------------------------------------------------------------


